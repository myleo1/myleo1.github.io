[{"categories":["KubeEdge"],"content":"背景 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:1:0","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"云原生容器网络发展阶段 第一阶段：Docker 容器网络，在 Docker 出现之后，也有自己的 4 种容器网络模型，比如 Host 模式、Content 模式，None 模式以及 Bridge 模式。但原生 Docker 容器无法解决容器之间的跨级通信问题，后来 Docker 推出 CNM 以及对应的实现 libnetwork 解决了这个问题。 第二阶段：容器网络接口(CNI), 后来由于各种原因 Kubernetes 主推的 CNI 热度反超了 CNM，CNI 是一个接口更简单、而且兼容性更高的容器网络接口规范。 第三阶段: 服务网格 + CNI, 随着服务网络的发展，它与 CNI 进行了配合，一些服务网格的插件，会在每个 pod 启动时往 pod 里注入 Sidecar 代理，来提供 4 层或 7 层的流量治理功能。 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:1:1","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"Kubernetes服务发现 Kubernetes 服务发展其实与容器网络是依赖的关系，首先用户会通过 Deployment 创建一组应用的后端实例对其进行管理。但 Pod 的生命周期是非常短暂的，可能会随着 Pod 更新升级或迁移等，它的 Pod IP 都会发生变化，这个现象称之为 Pod IP 的漂移。 为了解决这个问题, Kubernetes 社区提出了 Service 的概念，每个 Service 都会对应到一组后端的一个应用实例上，通过提供恒定不变的 Cluster IP 来解决 Pod IP 漂移的问题，同时也提供了 proxy 组件，基于控制面提供的一些信息维护 Cluster IP 到 Pod IP 的转换规则。当 Client 需要访问该服务时，一般只需要访问这个不变的 Cluster IP 即可。这个流量会经过本机的网络栈，被替换成了 mysql 后端实例的 Pod IP，通过容器网络请求发送。 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:1:2","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"边缘场景下的挑战 边缘计算细分领域众多，互操作性差 边云通信网络质量低，时延高，且边缘经常位于私有网络，难以实现双向通信 边缘资源受限，需要轻量化的组件管理运行边缘应用 边缘离线时，需要具备业务自治和本地故障恢复等能力 边缘节点高度分散，如何高效管理，降低运维成本 如何对异构资源进行标准化管理和灵活配置 以上这些关键挑战，边缘计算平台 KubeEdge 均可以实现，也解决了基本上所有的问题。但除了这些问题外，还有一些其他问题，举个例子：比如边缘有一个视频流应用，需要与云上的 AI 应用进行交互。首先边缘的网络是无法直接与云上网络互相连通的，所以无法从边缘对云上进行访问。不过这个问题其实可以通过给云上的 AI 应用配置一个公网 IP 来解决，但如果云上的每一个应用都配置一个公网 IP，那 IP 将无法收敛。而且云上的应用想要主动访问边缘的应用，其实也是做不到的，因为边缘上的应用一般都处于私网里，它一般不会有公共 IP，所以就无法做到正确路由和双向通信。 总的来说，有以下几个问题： 边云网络割裂，微服务之间无法跨子网直接通信 边缘侧缺少服务发现能力 边缘环境下组网配置管理复杂 基于以上的问题，EdgeMesh 应运而生。 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:1:3","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"EdgeMesh ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:0","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"定义 EdgeMesh 作为 KubeEdge 集群的数据面组件，为应用程序提供了简单的服务发现与流量代理功能，从而屏蔽了边缘场景下复杂的网络结构。 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:1","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"设计原则 轻量化: 每个节点仅需部署一个极轻的代理组件，边缘侧无需依赖 CoreDNS、Kube-Proxy 和 CNI 插件等原生组件 云原生体验: 为 KubeEdge 集群中的容器应用提供与云原生一致的服务发现与流量转发体验 跨子网通信: 屏蔽复杂的边缘网络环境，提供容器间的跨子网边边和边云通信能力 高可靠性: 通过打洞建立点对点直连，转发效率极高；在不支持打洞时通过中继转发流量，保障服务之间的正常通讯 分层式架构: 采用分层式设计架构，各模块能够与原生组件兼容并支持动态关闭 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:2","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"实现功能 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:3","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"架构 EdgeMesh-Agent Proxier：负责配置内核的 iptables 规则，将请求拦截到 EdgeMesh 进程内 DNS：内置的 DNS 解析器，将节点内的域名请求解析成一个服务的集群 IP Traffic：基于 Go-Chassis 框架的流量转发模块，负责转发应用间的流量 Controller：通过 KubeEdge 的边缘侧 Local APIServer 能力获取 Services、Endpoints、Pods 等元数据 Tunnel-Agent：利用中继和打洞技术来提供跨子网通讯的能力 EdgeMesh-Server Tunnel-Server：与 EdgeMesh-Agent 建立连接，协助打洞以及为 EdgeMesh-Agent 提供中继能力 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:4","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"工作流程 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:5","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"实现原理 利用P2P打洞技术，来打通边缘节点间的网络 将边缘节点间的通信分为局域网和跨局域网 局域网内的通信：直接通信 跨局域网通信：打洞成功时Agent之间建立直连通道，否则通过Server中继转发 离线场景下通过EdgeMesh内部实现轻量级DNS服务器，域名请求在节点内闭环 极致轻量化，每个节点只有一个Agent P2P打洞实现（NAT） NAT类型 锥型 完全锥形（NAT1）：任何一个外部主机发送到（eAddr:ePort）的报文将会被转换后发送到（iAddr:iPort） 限制锥形（NAT2）：只有（iAddr:iPort）向特定的外部主机hAddr发送过数据，主机hAddr从任意端口发送到（eAddr:ePort）的报文将会被转发到（iAddr:iPort） 端口限制锥形（NAT3）：只有（iAddr:iPort）向特定的外部主机端口对（hAddr:hPort）发送过数据，由（hAddr:hPort）发送到（eAddr:ePort）的报文将会被转发到（iAddr:iPort） 对称型 对称NAT（NAT4）：对称式NAT把内网IP和端口到相同目的地址和端口的所有请求，都映射到同一个公网地址和端口；同一个内网主机，用相同的内网IP和端口向另外一个目的地址发送报文，则会用不同的映射（比如映射到不同的端口）。 注：NAT类型与运营商相关 结论 穿透能力只与NAT类型强相关，从上到下穿透性下降，安全性上升 一端是对称型，另一端是对称型或端口限制型则无法穿透 关于NAT，更详细的介绍请戳：https://zhuanlan.zhihu.com/p/335253159 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:6","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"官方性能测试 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:7","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"目前存在的问题 EdgeMesh目前不支持多点部署，在某些情况下会出现问题 情况1： 当连接数过大或通信流量过大时，都会导致edgemesh-server的单点故障问题 情况2： edgemesh-server 的位置会影响流量转发的延迟。如果中继服务器的位置太远，会大大增加延迟。 情况3： 在某些私有网络的情况下，edgemesh-agent 无法连接到外网的 edgemesh-server，从而导致 edgemesh-agent 无法正常工作。 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:8","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"EdgeMesh RoadMap 2021.06： EdgeMesh 项目开源 2021.09： EdgeMesh 支持微服务跨局域网边云/边边通信 2021.12： EdgeMesh 支持一键化部署 2022.03： EdgeMesh 支持 Pod IP 的流量跨边云转发 2022.06： EdgeMesh 对接标准的 Istio 进行服务治理控制 2022.09： EdgeMesh 支持跨集群服务通信 ","date":"2022-07-10","objectID":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/:2:9","tags":["KubeEdge","EdgeMesh","边缘计算"],"title":"KubeEdge组件之EdgeMesh","uri":"/kubeedge%E7%BB%84%E4%BB%B6%E4%B9%8Bedgemesh/"},{"categories":["KubeEdge"],"content":"核心理念 云边协同 双向多路复用消息通道，支持边缘节点位于私有网络（无公网IP环境） Websocket+消息封装，大幅减少通信压力，高时延下仍可正常工作 边缘离线自治 节点元数据持久化，实现节点级离线自治 节点故障恢复无需List-watch，降低网络压力，快速ready 极致轻量 重组Ksubelet功能模块，极致轻量化（~10mb内存占用） 移除内嵌存储驱动，通过CSI接入 支持CRI集成Containerd、CRI-O，优化runtime资源消耗 ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:1:0","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"架构 KubeEdge总体由云上部分（CloudCore）和边缘部分（EdgeCore）构成: ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:2:0","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"云上组件 EdgeController（扩展的K8s控制器） 边缘节点管理 应用状态元数据云边同步 设备抽象API/DeviceController（扩展的K8s控制器） 接入和管理边缘设备 设备元数据（信息、状态）云边同步 CSI Driver 同步存储数据到边缘 Admission Webhook 校验进入KubeEdge对象的合法性 CloudHub WebSocket服务端，监听云端变化，缓存并发送消息到EdgeHub ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:2:1","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"边缘组件 EdgeHub WebSocket客户端，负责与云端（EdgeController）交互，同步云端资源更新；并向上报告边缘主机和设备状态变化 MetaManager 消息处理器，位于 Edged 和 Edgehub 之间，它负责向轻量级数据库 (SQLite) 存储/检索元数据 DeviceTwin 负责存储设备状态（开关值、传感器值等）到EdgeStore并将设备状态同步到云，另外为应用程序提供查询接口 EventBus 与MQTT服务器（mosquitto）交互的MQTT客户端，为其他组件提供订阅和发布功能 ServiceBus 运行在边缘的 HTTP 客户端，接受来自云上服务的请求，与运行在边缘端的 HTTP 服务器交互，提供了云上服务通过 HTTP 协议访问边缘端 HTTP 服务器的能力 Edged（Kubelet-lite） 轻量的Kubelet，用于管理容器化的应用程序 ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:2:2","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"关键能力 ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:3:0","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"支持CRI接口 早期KubeEdge集成了Docker Client，v1.0之后加入CRI，可自行选择容器运行时 通过CRI，把相关组件和容器运行时进行解耦，可实现选择适合自己的容器运行时 ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:3:1","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"支持CSI接口 Kubernetes的数据存储在云上数据中心，每个节点都能轻松访问到，并且组件与Master之间的交互采用List、Watch机制同步数据。 以云边协同为基础的KubeEdge部分节点在云上，部分节点在边缘，以List、Watch机制同步数据需要跨越云边实现List、Watch，开销很大。 KubeEdge的做法是：在云上使用CSI Driver from KubeEdge做劫持，通过CloudHub发送到边缘，真实的存储后端实际上分布在边缘。 ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:3:2","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"边缘设备管理 DeviceModel：定义设备通用的属性字段，是否只读，是否需要做数据处理 Device：定义需要接入的设备实体，会从DeviceModel继承属性字段，只要配置设备访问方式等就能实现与设备的交互 南向Mapper组件：把设备的其他协议（OPC-UA、Modbus等）转换成MQTT协议，推荐每个边缘节点以Demonset形式部署Mapper ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:3:3","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"EdgeMesh:ServiceMesh At Edge EdgeMesh作用 实现简单的服务发现和流量代理功能，从而屏蔽了边缘场景下复杂的网络结构 EdgeMesh实现原理 利用P2P技术，来打通边缘节点间网络 P2P打洞不成功情况下，通过Server中继转发 ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:3:4","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":["KubeEdge"],"content":"EdgeSite EdgeSite作用 KubeEdge默认在云端部署EdgeController和DeviceController，然后通过Websocket/Quic隧道连接云端和边缘端，通过云端一个中心来统一调度应用到特定Edge Node上运行。但是，就像Rancher K3s的应用场景，有些时候边缘端也希望运行一套完整的K8s集群，K3s的方案只是提供了一套精简的K8s集群，而Kubeedge的EdgeSite模式，除了运行K8s集群之外，还提供了对IoT设备的适配和支持。 有些场景用户需要在边缘运行一个独立的 Kubernetes 集群来获得完全控制并提高离线调度能力，有两种情况用户需要这样做： CDN场景 CDN 站点通常遍布全球，无法保证边端节点间网络连接和质量；另一个因素是部署在 CDN 边缘的应用程序通常不需要与中心交互。对于那些在 CDN 资源中部署边缘集群的人来说，他们需要确保集群在没有与中央云连接的情况下也能正常工作。 用户需要部署资源有限且大部分时间离线运行的边缘环境 在一些物联网场景中，用户需要部署一个边缘环境并离线运行。 对于这些用例，需要一个独立的、完全受控的、轻量级的 Edge 集群。通过集成 KubeEdge 和标准 Kubernetes，这个 EdgeSite 使客户能够运行一个高效的 Kubernetes 集群来进行 Edge/IOT 计算。 From:https://www.bookstack.cn/read/kubeedge/1171574c81cee03f.md ","date":"2022-06-27","objectID":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/:3:5","tags":["KubeEdge","边缘计算"],"title":"KubeEdge架构及其核心组件","uri":"/kubeedge%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"},{"categories":null,"content":" Leo admin@leow.tech · myleo1 · My Site ","date":"2022-06-26","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"个人信息 男 云平台研发工程师（Golang） ","date":"2022-06-26","objectID":"/about/:0:1","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"教育经历 硕士，浙江工商大学，信息与通信工程，2020.9~2023.6 ","date":"2022-06-26","objectID":"/about/:0:2","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"工作经历 杭州领克信息科技有限公司，研发部，IoT后端开发工程师，2020.6~2022.4 网易（杭州）网络有限公司，伏羲实验室，云平台研发工程师，2022.5~ ","date":"2022-06-26","objectID":"/about/:0:3","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"技能清单 ★★★ Golang ★★★ Kubernetes ★★★ Docker ★★★ MySQL ★★☆ PostgreSQL ★★☆ Redis ","date":"2022-06-26","objectID":"/about/:0:4","tags":null,"title":"About","uri":"/about/"}]